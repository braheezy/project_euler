#!/usr/bin/env python3
"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

TODO: Kinda slow. Not optimized?
"""
import sys

if __name__ == "__main__":

    def triangle_num_generator():
        n = 1
        i = 1
        while True:
            yield n
            i += 1
            n += i

    def count_divisors(n):
        cnt = 0
        for i in range(1, int(n**0.5) + 1):
            if n % i == 0:
                if (n / i == i):
                    cnt += 1
                else:
                    cnt += 2
        return cnt

    limit = 500
    triangles = triangle_num_generator()
    num_divisors = count_divisors(next(triangles))
    while num_divisors <= limit:
        curr = next(triangles)
        num_divisors = count_divisors(curr)

    print(f"First triangle number to have over {limit} divisors: {curr}")
